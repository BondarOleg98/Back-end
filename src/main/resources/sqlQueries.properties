#User
spring.queries.user.findByUsername = SELECT * FROM users WHERE email = ?
spring.queries.user.findByUserId = SELECT * FROM users WHERE user_id = ?
spring.queries.user.create = INSERT INTO users (full_name, password, email, creation_time, enabled, photo_path) VALUES(?, ?, ?, ?, ?, ?)
spring.queries.user.update = UPDATE users SET full_name = ?, email = ?, password = ?, creation_time = ?, enabled = ?, photo_path = ? WHERE user_id = ?
spring.queries.user.delete = DELETE FROM users WHERE user_id = ? AND full_name = ? AND email = ? AND password = ? AND creation_time = ? AND enabled = ? AND photo_path = ?
spring.queries.user.getByFilter = SELECT * FROM users WHERE (full_name = ? OR ?) AND (email = ? OR ?) AND (password = ? OR ?) AND (creation_time = ? OR ?) AND (enabled = ? OR ?) AND (photo_path = ? OR ?) LIMIT ? OFFSET ?
spring.queries.user.updateByFilter = UPDATE users SET full_name = (CASE WHEN ? THEN ? ELSE full_name END), email = (CASE WHEN ? THEN ? ELSE email END), password = (CASE WHEN ? THEN ? ELSE password END), creation_time = (CASE WHEN ? THEN ? ELSE creation_time END), enabled = (CASE WHEN ? THEN ? ELSE enabled END), photo_path = (CASE WHEN ? THEN ? ELSE photo_path END) WHERE (full_name = ? OR ?) AND (email = ? OR ?) AND (password = ? OR ?) AND (creation_time = ? OR ?) AND (enabled = ? OR ?) AND (photo_path = ? OR ?)
spring.queries.user.deleteByFilter = DELETE FROM users WHERE (full_name = ? OR ?) AND (email = ? OR ?) AND (password = ? OR ?) AND (creation_time = ? OR ?) AND (enabled = ? OR ?) AND (photo_path = ? OR ?)

spring.queries.create.authorizationLinks = INSERT INTO authorization_links (token, expiration, user_id, is_registration_token, used) VALUES(?, ?, ?, ?, ?)
spring.queries.find.authorizationLink = SELECT * FROM authorization_links WHERE token=?
spring.queries.update.authorizationLinks = UPDATE authorization_links SET used = ? WHERE token = ?

#Announcement
announcements.select=SELECT * FROM announcements LIMIT ? OFFSET ?
