#User
user.findByEmail=SELECT * FROM users WHERE email = ?
user.activate=UPDATE users SET enabled = ? WHERE user_id = ? AND email = ? AND password = ?
user.getById=SELECT * FROM users WHERE user_id = ?
user.insert=INSERT INTO users (full_name, password, email, creation_time, enabled, photo_path) VALUES(?, ?, ?, ?, ?, ?)
user.update=UPDATE users SET password = coalesce(?, password), email = coalesce(?, email), enabled = coalesce(?, false), photo_path = coalesce(?, photo_path), full_name = coalesce(?, full_name) WHERE user_id = ?
user.delete=DELETE FROM users WHERE user_id = ?
user.findByEmailOrFullNameFilterByRole=SELECT DISTINCT u.* FROM users u inner join users_roles ur on u.user_id = ur.user_id WHERE ( role_id = ? ) AND ((LOWER(email) LIKE LOWER(?)) OR (LOWER(full_name) LIKE LOWER(?))) LIMIT ? OFFSET ?
user.findByEmailOrFullNameFilterByRoleCount=SELECT DISTINCT COUNT(*) FROM users u inner join users_roles ur on u.user_id = ur.user_id WHERE ( role_id = ? ) AND ((LOWER(email) LIKE LOWER(?)) OR (LOWER(full_name) LIKE LOWER(?)))
user.findByEmailOrFullNameFilterByRoleWithout=SELECT DISTINCT u.* FROM users u inner join users_roles ur on u.user_id = ur.user_id WHERE ( role_id != ? ) AND ((LOWER(email) LIKE LOWER(?)) OR (full_name LIKE LOWER(?))) LIMIT ? OFFSET ?
user.findByEmailOrFullNameFilterByRoleWithoutCount=SELECT DISTINCT COUNT(*) FROM users u inner join users_roles ur on u.user_id = ur.user_id WHERE ( role_id != ? ) AND ((LOWER(email) LIKE LOWER(?)) OR (full_name LIKE LOWER(?)))
user.deleteByEmail=DELETE FROM users WHERE email = ?
user.searchByFullNameContains=SELECT * FROM users WHERE LOWER(full_name) LIKE LOWER(?)
user.getListId = SELECT user_id FROM users
#Role
role.findByRoleName = SELECT * FROM roles WHERE name = ?
role.findByRoleId   = SELECT * FROM roles WHERE role_id = ?
role.create         = INSERT INTO roles (name, description) VALUES(?, ?)
role.update         = UPDATE roles SET name = ?, description = ? WHERE role_id = ? AND name = ? AND description = ?
role.delete         = DELETE FROM roles WHERE role_id = ?
role.findByUserId   = SELECT roles.name, roles.role_id, roles.description FROM users_roles, roles WHERE user_id = ? AND users_roles.role_id = roles.role_id
role.sqlGetAll = SELECT * FROM roles
#UserRole
roleUser.create = INSERT INTO users_roles (user_id, role_id) VALUES(?, ?)
roleUser.update = UPDATE users_roles SET role_id = ? WHERE user_id = ?
roleUser.deleteUserId = DELETE FROM users_roles WHERE user_id = ?
roleUser.deleteRoleId = DELETE FROM users_roles WHERE role_id = ?
roleUser.findByUserId = SELECT * FROM users_roles WHERE user_id = ?
#Announcement
announcements.getById=SELECT * FROM ANNOUNCEMENTS WHERE ANNOUNCEMENT_ID = ?
announcements.select=SELECT * FROM ANNOUNCEMENTS ORDER BY CREATION_TIME DESC LIMIT ? OFFSET ?
announcements.selectAllPublished=SELECT * FROM ANNOUNCEMENTS WHERE published=true ORDER BY CREATION_TIME DESC LIMIT ? OFFSET ?
announcements.count=SELECT COUNT(*) FROM ANNOUNCEMENTS
announcements.countPublished=SELECT COUNT(*) FROM ANNOUNCEMENTS WHERE published=true
announcements.insert=INSERT INTO ANNOUNCEMENTS(TITLE, DESCRIPTION, USER_ID) VALUES(?, ?, ?)
announcements.update=UPDATE ANNOUNCEMENTS SET TITLE = ?, DESCRIPTION = ?, USER_ID = ? WHERE ANNOUNCEMENT_ID = ?
announcements.delete=DELETE FROM ANNOUNCEMENTS WHERE ANNOUNCEMENT_ID = ?
announcements.publish=UPDATE ANNOUNCEMENTS SET PUBLISHED = true WHERE ANNOUNCEMENT_ID = ?
announcements.unPublish=UPDATE ANNOUNCEMENTS SET PUBLISHED = false WHERE ANNOUNCEMENT_ID = ?
#link
authorizationLink.create=INSERT INTO authorization_links (token, expiration, user_id, is_registration_token, used) VALUES(?, ?, ?, ?, ?)
authorizationLink.findByToken=SELECT * FROM authorization_links WHERE token=?
authorizationLink.findByUserId=SELECT * FROM authorization_links WHERE user_id=?
authorizationLink.update=UPDATE authorization_links SET used = ? WHERE token = ?
#Books
books.getById=SELECT * FROM BOOKS WHERE BOOK_ID = ?
books.insert=INSERT INTO BOOKS(TITLE, ISBN, RELEASE, PAGES, FILE_PATH, PHOTO_PATH, PUBLISHING_HOUSE, RATE_SUM, VOTERS_COUNT, SLUG) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
books.update=UPDATE books SET TITLE = ?, ISBN = ?, RELEASE = ?, PAGES = ?, FILE_PATH = ?, PHOTO_PATH = ?, PUBLISHING_HOUSE = ?, RATE_SUM = ?, VOTERS_COUNT = ?, SLUG = ? WHERE BOOK_ID = ?
books.delete=DELETE FROM BOOKS WHERE BOOK_ID = ?
books.countFiltered=SELECT COUNT(*) FROM BOOKS WHERE TITLE LIKE '%' || COALESCE(?, TITLE) || '%' AND BOOK_ID IN (SELECT BOOK_ID FROM BOOKS_GENRES WHERE GENRE_ID = COALESCE(?, GENRE_ID)) AND BOOK_ID IN (SELECT BOOK_ID FROM BOOKS_AUTHORS WHERE AUTHOR_ID = COALESCE(?, AUTHOR_ID)) AND RELEASE = COALESCE(?, RELEASE)
books.getFiltered=SELECT * FROM BOOKS WHERE TITLE LIKE '%' || COALESCE(?, TITLE) || '%' AND BOOK_ID IN (SELECT BOOK_ID FROM BOOKS_GENRES WHERE GENRE_ID = COALESCE(?, GENRE_ID)) AND BOOK_ID IN (SELECT BOOK_ID FROM BOOKS_AUTHORS WHERE AUTHOR_ID = COALESCE(?, AUTHOR_ID)) AND RELEASE = COALESCE(?, RELEASE) LIMIT ? OFFSET ?
books.getBySlug=SELECT * FROM BOOKS WHERE SLUG = ?
books.getRandom=SELECT * FROM BOOKS ORDER BY RANDOM() LIMIT ?
#BooksGenres
books_genres.insert=INSERT INTO BOOKS_GENRES(BOOK_ID, GENRE_ID) VALUES(?, ?)
books_genres.delete=DELETE FROM BOOKS_GENRES WHERE BOOK_ID = ? AND GENRE_ID = ?
#BooksAuthors
books_authors.insert=INSERT INTO BOOKS_AUTHORS(BOOK_ID, AUTHOR_ID) VALUES(?, ?)
books_authors.delete=DELETE FROM BOOKS_AUTHORS WHERE BOOK_ID = ? AND AUTHOR_ID = ?
#Genres
genres.getById=SELECT * FROM GENRES WHERE GENRE_ID = ?
genres.insert=INSERT INTO GENRES(NAME, DESCRIPTION) VALUES(?, ?)
genres.update=UPDATE GENRES SET NAME = ?, DESCRIPTION = ? WHERE GENRE_ID = ?
genres.delete=DELETE FROM GENRES WHERE GENRE_ID = ?
genres.getAll=SELECT * FROM GENRES;
genres.getByBook=SELECT * FROM GENRES WHERE GENRE_ID IN (SELECT GENRE_ID FROM BOOKS_GENRES WHERE BOOK_ID = ?)
genres.searchPartByNameContains=SELECT * FROM genres WHERE LOWER(name) LIKE LOWER(?) LIMIT ? OFFSET ?
genres.searchByNameContains=SELECT * FROM genres WHERE LOWER(name) LIKE LOWER(?)
genres.getStats=SELECT G.genre_id AS GENRE, COUNT(G.genre_id) AS COUNT FROM ((SELECT B.book_id FROM books B INNER JOIN searching_history SH ON B.book_id = SH.book_id INNER JOIN users U ON SH.user_id = U.user_id WHERE U.user_id = ?) UNION ALL (SELECT B.book_id FROM books B INNER JOIN users_books UB ON B.book_id = UB.book_id INNER JOIN users U ON UB.user_id = U.user_id WHERE UB.favorite AND U.user_id = ?)) B INNER JOIN books_genres BG ON B.book_id = BG.book_id INNER JOIN genres G ON BG.genre_id = G.genre_id GROUP BY G.genre_id
#Authors
authors.getById=SELECT * FROM AUTHORS WHERE AUTHOR_ID = ?
authors.insert=INSERT INTO AUTHORS(FULL_NAME, DESCRIPTION) VALUES(?, ?)
authors.update=UPDATE AUTHORS SET FULL_NAME = ?, DESCRIPTION = ? WHERE AUTHOR_ID = ?
authors.delete=DELETE FROM AUTHORS WHERE AUTHOR_ID = ?
authors.getAll=SELECT * FROM AUTHORS;
authors.getByBook=SELECT * FROM AUTHORS WHERE AUTHOR_ID IN (SELECT AUTHOR_ID FROM BOOKS_AUTHORS WHERE BOOK_ID = ?)
authors.searchByFullNameContains=SELECT * FROM authors WHERE LOWER(full_name) LIKE LOWER(?)
authors.searchPartByFullNameContains=SELECT * FROM authors WHERE LOWER(full_name) LIKE LOWER(?) LIMIT ? OFFSET ?
authors.getStats=SELECT A.author_id AS AUTHOR, COUNT(A.author_id) AS COUNT FROM ((SELECT B.book_id FROM books B INNER JOIN searching_history SH ON B.book_id = SH.book_id INNER JOIN users U ON SH.user_id = U.user_id WHERE U.user_id = ?) UNION ALL (SELECT B.book_id FROM books B INNER JOIN users_books UB ON B.book_id = UB.book_id INNER JOIN users U ON UB.user_id = U.user_id WHERE UB.favorite AND U.user_id = ?)) B INNER JOIN books_authors BA ON B.book_id = BA.book_id INNER JOIN authors A ON BA.author_id = A.author_id GROUP BY A.author_id
#BookReviews
book_reviews.getById = SELECT * FROM book_reviews WHERE book_review_id = ?
book_reviews.getAll = SELECT * FROM BOOK_REVIEWS ORDER BY CREATION_TIME DESC LIMIT ? OFFSET ?
book_reviews.insert = INSERT INTO book_reviews (book_review_id, rating, description, user_id, book_id) VALUES(DEFAULT, ?, ?, ?, ?)
book_reviews.count = SELECT COUNT(*) FROM BOOK_REVIEWS
book_reviews.update = UPDATE book_reviews SET rating = ?, description = ?, published = ? WHERE book_review_id = ?
book_reviews.delete = DELETE from book_reviews WHERE book_review_id = ?
book_reviews.avgRating = SELECT AVG(br.rating) FROM book_reviews br WHERE book_id = ?
book_reviews.countByUserIdBookId = SELECT COUNT(*) FROM book_reviews WHERE user_id = coalesce(?, user_id) AND book_id = coalesce(?, book_id)
book_reviews.getPage = SELECT * FROM book_reviews WHERE book_id = ? ORDER BY creation_time DESC LIMIT ? OFFSET ?
book_reviews.publish = UPDATE book_reviews SET published = true WHERE book_review_id = ?
book_reviews.unpublish = UPDATE book_reviews SET published = false WHERE book_review_id = ?

# Publishing houses
publishingHouses.getAll = SELECT * FROM publishing_houses;

#BookOverviews
book_overviews.getById = SELECT * FROM BOOK_OVERVIEWS WHERE BOOK_OVERVIEW_ID = ?
book_overviews.getAll = SELECT * FROM BOOK_OVERVIEWS ORDER BY CREATION_TIME DESC LIMIT ? OFFSET ?
book_overviews.countByBook = SELECT COUNT(*) FROM BOOK_OVERVIEWS WHERE BOOK_ID = ?
book_overviews.count = SELECT COUNT(*) FROM BOOK_OVERVIEWS
book_overviews.getByBook = SELECT * FROM BOOK_OVERVIEWS WHERE BOOK_ID = ? LIMIT ? OFFSET ?
book_overviews.getPublishedByBook = SELECT * FROM BOOK_OVERVIEWS WHERE BOOK_ID = ? AND PUBLISHED = TRUE
book_overviews.insert = INSERT INTO book_overviews (description, user_id, book_id) VALUES (?, ?, ?)
book_overviews.update = UPDATE book_overviews SET description = ?, user_id = ?, book_id = ? WHERE book_overview_id = ?
book_overviews.delete = DELETE FROM book_overviews WHERE book_overview_id = ?
book_overviews.publish = UPDATE book_overviews SET published = true WHERE book_overview_id = ?
book_overviews.unpublish = UPDATE book_overviews SET published = false WHERE book_overview_id = ?


#ReviewComments
review_comments.getById = SELECT * FROM review_comments WHERE comment_id = ?
review_comments.insert = INSERT INTO review_comments (user_id, book_review_id, content, creation_time) VALUES(?, ?, ?, ?)
review_comments.update = UPDATE review_comments SET user_id = ?, book_review_id = ?, content = ? WHERE comment_id = ?
review_comments.delete = DELETE from review_comments WHERE comment_id = ?
review_comments.getPage = SELECT * FROM review_comments WHERE book_review_id = ? ORDER BY creation_time DESC LIMIT ? OFFSET ?
review_comments.countByBookReviewId = SELECT COUNT(*) FROM review_comments WHERE book_review_id = ?
# Settings
settings.getById=SELECT * FROM settings WHERE setting_id = ?
settings.getByUserId=SELECT * FROM settings WHERE user_id = ?
settings.insert=INSERT INTO settings(user_id, disable_notifications, make_private, show_my_favourite_books, show_my_announcements, show_my_book_reviews, show_my_book_overviews) VALUES (?, ?, ?, ?, ?, ?, ?)
settings.update=UPDATE settings SET user_id=?, disable_notifications=?, make_private=?, show_my_favourite_books=?, show_my_announcements=?, show_my_book_reviews=?, show_my_book_overviews=? WHERE setting_id = ?
settings.delete=DELETE FROM settings WHERE setting_id = ?
# Activities
activity.sqlFindByUserIdInList=SELECT * FROM activities WHERE user_id IN (?) LIMIT ? OFFSET ?
activity.sqlFindFriendsActivity=SELECT * FROM activities  inner join settings s on activities.user_id = s.user_id WHERE ((name = 'ADD_TO_FAVOURITE' and s.show_my_favourite_books = true) OR (name = 'CREATE_ANNOUNCEMENT' and s.show_my_announcements = true) OR (name = 'CREATE_REVIEW' and s.show_my_book_reviews = true) OR (name = 'CREATE_OVERVIEW' and s.show_my_book_overviews = true) ) AND (s.user_id in (SELECT user_id FROM friends WHERE user2_id = ? UNION DISTINCT SELECT user2_id FROM friends WHERE user_id = ? )) ORDER BY creation_time DESC LIMIT ? OFFSET ?
activity.getFriendsListActivitySize=SELECT COUNT(*) FROM activities inner join settings s on activities.user_id = s.user_id WHERE ((name = 'ADD_TO_FAVOURITE' and s.show_my_favourite_books = true) OR (name = 'CREATE_ANNOUNCEMENT' and s.show_my_announcements = true) OR (name = 'CREATE_REVIEW' and s.show_my_book_reviews = true) OR (name = 'CREATE_OVERVIEW' and s.show_my_book_overviews = true) ) AND (s.user_id in (SELECT user_id FROM friends WHERE user2_id = ? UNION DISTINCT SELECT user2_id FROM friends WHERE user_id = ? ))
activity.sqlGetById=SELECT * FROM activities WHERE activity_id = ?
activity.sqlInsert=INSERT INTO activities(name, description, user_id, creation_time) VALUES (?, ?, ?, ?)
activity.sqlUpdate=UPDATE activities SET name = ?, description = ?, user_id = ?, creation_time = ?
activity.sqlDelete=DELETE FROM activities WHERE activity_id = ?
# Friends
friends.getFriendsList = SELECT u.* FROM friends inner join users u on friends.user_id = u.user_id WHERE user2_id = ? UNION DISTINCT SELECT u2.* FROM friends inner join users u2 on friends.user2_id = u2.user_id WHERE u2.user_id = ?
friends.checkFriends = SELECT COUNT(*) > 0 as isFriends FROM friends WHERE (user_id = ? AND user2_id = ?) OR (user_id = ? AND user2_id = ?)
friends.checkAwaitingFriendRequestAccept = SELECT COUNT(*) > 0 FROM invitations WHERE (invitation_source = ? AND invitation_target = ?) AND accepted = false
friends.deleteByUsersId = DELETE FROM friends WHERE (user_id = ? AND user2_id = ?) OR (user_id = ? AND user2_id = ?)
friends.insert = INSERT INTO friends(user_id, user2_id) VALUES (?, ?)
friends.sqlGetFriendsPageable = SELECT u.* FROM users u inner join (SELECT user_id FROM friends WHERE user2_id = ? UNION DISTINCT  SELECT user2_id FROM friends WHERE user_id = ?) f on u.user_id = f.user_id LIMIT ? OFFSET ?
friends.getFriendsPageableCount = SELECT COUNT(*) FROM users u inner join (SELECT user_id FROM friends WHERE user2_id = ? UNION DISTINCT  SELECT user2_id FROM friends WHERE user_id = ?) f on u.user_id = f.user_id
# Friend invitations
friendInvitation.getById = SELECT * FROM invitations WHERE invitation_id = ?
friendInvitation.insert = INSERT INTO invitations(invitation_source, invitation_target, accepted, creation_time) VALUES (?, ?, ?, ?)
friendInvitation.update = UPDATE invitations SET invitation_source = ?, invitation_target = ?, accepted = ?, creation_time = ? WHERE invitation_id = ?
friendInvitation.delete = DELETE FROM invitations WHERE invitation_id = ?
friendInvitation.getLastAwaiting = SELECT * FROM invitations WHERE accepted is null AND invitation_target = ? ORDER BY creation_time DESC LIMIT ? OFFSET ? 
#Notifications
notifications.getByNotifierId = select n.notification_id, n.notification_object_id, n.notifier_id, n.is_read, obj.entity_id, obj.notification_type_id, obj.send_all, obj.is_read object_read, actor.user_id, actor.full_name, nm.notification_message_id, nm.notification_message_text, nt.notification_type_name, obj.creation_time AT TIME ZONE 'Europe/Kiev' as "creation_time"  \
                        from notifications n \
                        inner join notification_objects obj on obj.notification_object_id = n.notification_object_id \
                        inner join notification_types nt on nt.notification_type_id = obj.notification_type_id \
                        inner join notification_messages nm on nm.notification_message_id = obj.notification_message_id \
                        inner join users actor on actor.user_id = obj.user_id where notifier_id = ? \
                        ORDER BY creation_time DESC LIMIT ? OFFSET ? 
notifications.getById = select n.notification_id, n.notification_object_id, n.notifier_id, n.is_read, obj.entity_id, obj.notification_type_id, obj.send_all, obj.is_read object_read, actor.user_id, actor.full_name, nm.notification_message_id, nm.notification_message_text, nt.notification_type_name, obj.creation_time \
                        from notifications n \
                        inner join notification_objects obj on obj.notification_object_id = n.notification_object_id \
                        inner join notification_types nt on nt.notification_type_id = obj.notification_type_id \
                        inner join notification_messages nm on nm.notification_message_id = obj.notification_message_id \
                        inner join users actor on actor.user_id = obj.user_id where notification_id = ?
notifications.getUserNotificationsCount =  select count(*) from notifications where notifier_id = ?
notifications.count =  select count(*) from notifications
notifications.insert = INSERT INTO notifications (notification_object_id, notifier_id) VALUES (?, ?)
notifications.update = UPDATE notifications SET notification_object_id = ?, notifier_id = ?, is_read = ? WHERE notification_id = ?
notifications.delete = DELETE from notifications WHERE notification_id = ?

#NotificationObjects
notification_objects.getById = select  obj.notification_object_id, obj.entity_id, obj.notification_type_id, obj.send_all, obj.is_read, actor.user_id, actor.full_name, nm.notification_message_id, nm.notification_message_text, nt.notification_type_name, obj.creation_time \
                               from notification_objects obj \
                               inner join notification_types nt on nt.notification_type_id = obj.notification_type_id \
                               inner join notification_messages nm on nm.notification_message_id = obj.notification_message_id \
                               inner join users actor on actor.user_id = obj.user_id \
                               where notification_object_id = ?
notification_objects.insert = INSERT INTO notification_objects (notification_type_id, entity_id, user_id, notification_message_id, send_all, is_read) VALUES (?, ?, ?, ?, ?, ?)
notification_objects.update = UPDATE notification_objects SET notification_type_id = ?, entity_id = ?, user_id = ?, notification_message_id = ?, send_all = ?, is_read = ? WHERE notification_object_id = ?
notification_objects.delete = DELETE from notification_objects WHERE notification_object_id = ?
notification_objects.count =  select count(*) from notification_objects

#UserBooks
user_book.getById = SELECT * FROM users_books WHERE users_books_id = ?
user_book.insert  = INSERT INTO users_books (users_books_id, book_id, user_id, favorite, read, creation_time) VALUES(?, ?, ?, ?, ?, ?)
user_book.update  = UPDATE users_books SET book_id = ?, user_id = ?, favorite = ?, read = ?, creation_time = ? WHERE users_books_id = ?
user_book.delete  = DELETE from users_books WHERE users_books_id = ?
user_book.getPage = SELECT * FROM users_books WHERE user_id = ? ORDER BY creation_time DESC LIMIT ? OFFSET ?
user_book.countByUserId = SELECT COUNT(*) FROM users_books WHERE user_id = ?

#BooksRecommendations
booksRecommendations.getLatestUpdateTime=SELECT MAX(CREATION_TIME) FROM BOOKS_RECOMMENDATIONS WHERE USER_ID = ?
booksRecommendations.insert=INSERT INTO BOOKS_RECOMMENDATIONS(USER_ID, BOOK_ID) VALUES (?, ?)
booksRecommendations.clear=DELETE FROM BOOKS_RECOMMENDATIONS WHERE USER_ID = ?
booksRecommendations.count=SELECT COUNT(*) FROM BOOKS B INNER JOIN BOOKS_RECOMMENDATIONS BR ON B.BOOK_ID = BR.BOOK_ID WHERE BR.USER_ID = ?
booksRecommendations.get=SELECT B.* FROM BOOKS B INNER JOIN BOOKS_RECOMMENDATIONS BR ON B.BOOK_ID = BR.BOOK_ID WHERE BR.USER_ID = ? ORDER BY BR.RECOMMENDATION_ID

#SearchingHistory
searchingHistory.insert=INSERT INTO SEARCHING_HISTORY(BOOK_ID, USER_ID) VALUES(?, ?)

#Achievements
achievements.getById = SELECT * FROM achievements WHERE achievement_id = ?
achievements.getByName = SELECT * FROM achievements WHERE name = ?
achievements.getByTableName = SELECT * FROM achievements WHERE table_name = ?
achievements.insert = INSERT INTO achievements (name, table_name, description, sql_query) VALUES(?, ?, ?, ?)
achievements.delete = DELETE from achievements WHERE achievement_id = ?
#UsersAchievements
users_achievements.insert = INSERT INTO users_achievements (user_id, achievement_id) VALUES(?, ?)
users_achievements.getAchievementsByUserId = SELECT a.achievement_id, a.name, a.description, a.sql_query, a.table_name FROM users_achievements us INNER JOIN achievements a ON a.achievement_id = us.achievement_id WHERE us.user_id = ? ORDER BY us.creation_time DESC LIMIT ? OFFSET ?
users_achievements.delete = DELETE FROM users_achievements WHERE user_id = coalesce(?, user_id) AND achievement_id = ?
users_achievements.countByUserId = SELECT count(*) FROM users_achievements WHERE user_id = ?
users_achievements.countByUserIdAchievementId = SELECT count(*) FROM users_achievements WHERE user_id = ? AND achievement_id = ?

#Chat
users_localChat.getById = SELECT u.full_name, u.user_id, u.email, u.creation_time, u.photo_path, u.password, u.enabled FROM local_chat lc INNER JOIN users u ON lc.user2_id = u.user_id WHERE lc.user1_id = ?
message.findByUsersId = SELECT content, user_id FROM messages WHERE chat_id = (SELECT chat_id FROM local_chat WHERE user1_id = ? AND user2_id = ?)
notificationMessage.getById = select * from notification_messages where notification_message_id = ?
notificationMessage.insert = insert into notification_messages(notification_message_text) values (?)

chat.findMessageByChatId = SELECT content, user_id, chat_id FROM messages WHERE chat_id = ?
chat.insert = INSERT INTO chat VALUES(DEFAULT) RETURNING chat_id
chat.findByChatId = SELECT * FROM local_chat WHERE chat_id = ?
chat.createLocalChat  = INSERT INTO local_chat(user1_id, user2_id, chat_id) VALUES(?, ?, ?)
chat.findByUsersId = SELECT * FROM local_chat WHERE (user1_id = ? AND user2_id = ?) OR (user1_id = ? AND user2_id = ?)
chat.sendMessage = INSERT INTO messages(user_id, chat_id, content) VALUES(?, ?, ?) RETURNING message_id
chat.findMessageById = SELECT * FROM messages WHERE message_id = ?

chat.findByChatName = SELECT name, chat_id, group_chat_id FROM group_chat WHERE name = ?
chat.insert.groupChat = INSERT INTO group_chat(name, chat_id) VALUES(?, ?)
chat.insert.reference = INSERT INTO group_chat_users(user_id, group_chat_id) VALUES(?, ?) RETURNING group_chat_users_id
chat.findReferenceById = SELECT * FROM group_chat_users WHERE group_chat_users_id = ?
chat.findByGroupChatId = SELECT name, chat_id, group_chat_id FROM group_chat WHERE group_chat_id = ?
chat.findAllChats = SELECT * FROM group_chat_users WHERE user_id = ?
