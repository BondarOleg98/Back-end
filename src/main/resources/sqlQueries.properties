#User
spring.queries.create.user = INSERT INTO users (full_name, password, email, creation_time, enabled, photo_path) VALUES(?, ?, ?, ?, ?, ?)
spring.queries.find.user.email = SELECT * FROM users WHERE email=?
spring.queries.find.user.id = SELECT * FROM users WHERE user_id=?
spring.queries.create.authorizationLinks = INSERT INTO authorization_links (token, expiration, user_id, is_registration_token, used) VALUES(?, ?, ?, ?, ?)
spring.queries.find.authorizationLink = SELECT * FROM authorization_links WHERE token=?
spring.queries.update.authorizationLinks = UPDATE authorization_links SET used = ? WHERE token = ?

#Announcement
announcements.select=SELECT * FROM announcements LIMIT ? OFFSET ?  

#Books
books.getById = SELECT * FROM BOOKS WHERE BOOK_ID = ?
books.insert = INSERT INTO BOOKS (TITLE, ISBN, RELEASE, PAGES, FILE_PATH, PHOTO_PATH, PUBLISHING_HOUSE, RATE_SUM, VOTERS_COUNT, SLUG) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
books.update = UPDATE books SET TITLE = ?, ISBN = ?, RELEASE = ?, PAGES = ?, FILE_PATH = ?, PHOTO_PATH = ?, PUBLISHING_HOUSE = ?, RATE_SUM = ?, VOTERS_COUNT = ?, SLUG = ? WHERE BOOK_ID = ?
books.delete = DELETE FROM BOOKS WHERE BOOK_ID = ?
books.getByName = SELECT * FROM BOOKS WHERE NAME = ? LIMIT ? OFFSET ?
books.getByGenre = SELECT * FROM BOOKS WHERE GENRE_ID = ? LIMIT ? OFFSET ?
books.getByAuthor = SELECT * FROM books WHERE AUTHOR_ID = ? LIMIT ? OFFSET ?
books.getByAnnouncementDate = SELECT * FROM BOOKS WHERE CREATION_TIME = ?
books.addGenre = INSERT INTO BOOKS_GENRES (BOOK_ID, GENRE_ID) VALUES(?, ?)
books.addAuthor = INSERT INTO BOOKS_AUTHORS (BOOK_ID, AUTHOR_ID) VALUES(?, ?)

